@import "colors.less";

// COMENTS, DUHR
.comment {
  color: @comment;
  background: @comment-bg;
}


.keyword {

  // @ of @font-face & @media
  color: @keyword;

  // try, catch, if, else, return (js)
  &.control {
    color: @keyword;
  }

  // =, +, -, ?, :, !=. &&, in (js)
  &.operator {
    color: @keyword;
  }

  // can't tell what this does :/
  &.other.special-method {
    color: @keyword;
  }

  // can't tell what this does :/
  &.other.unit {
    color: @keyword;
  }
}


// STORAGE |
.storage {
  color: @storage;

  // var of var a = b;
  &.modifier {
    color: @storage;
  }

}


.constant {

  // true, false, null, undefined
  color: @constant;

  // \ of ("what\'s")
  &.character.escape {
    color: @constant;
  }

  // all the numbers!
  &.numeric {
    color: @numeric;
  }

  // can't tell what this does :/
  &.other.color {
    color: @constant;
  }

  // can't tell what this does :/
  &.other.symbol {
    color: @constant;
  }
}



.variable {

  // this (js), @varable_name (sass), http://web.com of url(http://web.com), variable of {{variable}} (handlebars)
  color: @variable;

  // can't tell what this does
  &.interpolation {
    color: @variable;
  }

  // foo & bar of function name(foo, bar)
  &.parameter.function {
    color: @function-param;
  }
}


// INVALID TEXT
.invalid.illegal, .invalid.deprecated {
  background: none;
  color: @error;
}

.string {

  .json {

  }

  // 'value' of var='value', "name.png" or src="name.png"  , etc
  color: @string;

  // REGEX - [\da-z] of /-([\da-z])/gi (js)
  .constant {
    color: @regex;
  }

  &.regexp {

    // ?:input, select, textarea, button of  /^(?:input|select|textarea|button)$/i,
    color: @regex;

    .constant.character.escape,
    .source.ruby.embedded,
    .string.regexp.arbitrary-repitition {
      color: @regex;
    }

    &.group {
      color: @regex;
    }

    &.character-class {
      color: @regex;
    }

    .source.ruby.embedded {
      color: @regex;
    }

  }

  // site.dir in {{site.dir}}
  .variable {
    color: @variable;
  }

  // can't tell what this does :/
  &.other.link {
    color: @string;
  }
}

// String interpolation in Ruby, CoffeeScript, and others
.source .string {
  .source,
  .meta.embedded.line {
    color: @string;
  }

  .punctuation.section.embedded {
    color: @string;

    .source {
      color: @string;  // Required for the end of embedded strings in Ruby # 716
    }
  }
}

// MISC PUNCTUATION
.punctuation {

  &.terminator {
    color: @punctuation;
  }

  &.separator {
    color: @punctuation;
  }

  &.definition {

    color: @punctuation;

    &.comment {
      color: @comment-punc;
    }

    // QUOTES
    &.string,
    &.variable,
    &.array {
      color: @string;
    }

    &.parameters {
      color: @code-font-color;
    }

    &.heading,
    &.identity {
      color: @code-font-color;
    }

    &.bold {
      color: @code-font-color;
      font-weight: bold;
    }

    &.italic {
      color: @code-font-color;
      font-style: italic;
    }
  }

  &.section.embedded {
    color: @code-font-color;
  }

}



.support {

  // background of background: none,
  color: @support;

  // SUPPORT | module of module.exports
  &.class {
    color: @support;
  }

  &.function  {
    color: @support; // .log of console.log, url of url(http://web.com)

    // can't tell what this does :/
    &.any-method {
      color: @support;
    }
  }

  // {{}} of {{ variable }}
  &.constant {
    color: @constant;  // none of text-decoration: none;
  }

  &.type.property-name.css {
    color: @support;
  }
}

// .class names in css & scss
.source .entity.name.tag, .source .entity.other.attribute-name, .meta.tag.inline, .meta.tag.inline .entity {
  color: @class;
}

  &.tag,
  &.tag .entity {
    color: @tag-entity;
  }


.html {

  .string {
    color: @code-font-color;
  }


  // inline elements - <span>
  .meta {


  }

  .punctuation.definition.tag {
    color: @tag;
  }

  .entity {

    &.name.tag {
      text-decoration: done;

      // structural elements - <html>
      &.structure {
        color: @tag;
      }

      // block level elements - <div>, <h1>
      &.block {
        color: @tag;
      }

      // inline elements - <span>
      &.script {
        // color: @tag;
      }

    }

    &.other {
      &.attribute-name {
        color: @element-attr;
      }
    }

  }

}

// ENTITY | exports of module.exports, <div id= of <div id="#id">, . of .className
.entity {

  color: @entity;

  // console of console.log (js)
  &.name.type {
    color: @entity;
    text-decoration: none;
  }

  &.other.inherited-class {
    color: @entity;
  }

  // init in init: function(){} (js)
  &.name.function {
    color: @entity;
  }

  &.name.class, &.name.type.class {
    color: @entity;
  }

  &.name.section {
    color: @entity;
  }

  // div of <div> (html), body of body{} (css)
  &.name.tag {
    color: @tag;
    text-decoration: done;
  }


  // CSS CLASSES
  &.other.attribute-name {
    color: @element-attr;

    // CSS ID's
    &.id {
      color: @id;
    }
  }
}

.meta {

  &.link {
    color: @meta;
  }

  &.require {
    color: @meta;
  }


  &.brace {

    // curly braces - {}
    &.curly {
      color: @brackets;
    }

    // parenthesis - ()
    &.round {
      color: @code-font-color;
    }
  }

  &.comma {
    color: @punctuation;
  }

  // .css files | commas, ([controls]) of audio:not([controls])
  &.selector {
    color: @punctuation;
  }

  &.separator {
    background-color: @punctuation;
    color: @punctuation;
  }
}

.none {
  color: @code-font-color;
}

.markup {
  &.bold {
    color: @markup;
    font-weight: bold;
  }

  &.changed {
    color: @markup;
  }

  &.deleted {
    color: @markup;
  }

  &.italic {
    color: @markup;
    font-style: italic;
  }

  &.heading .punctuation.definition.heading {
    color: @markup;
  }

  &.inserted {
    color: @markup;
  }

  &.list {
    color: @markup;
  }

  &.quote {
    color: @markup;
  }

  &.raw.inline {
    color: @markup;
  }
}

.source.gfm .markup {
  -webkit-font-smoothing: auto;
  &.heading {
    color: @code-font-color;
  }
}


atom-text-editor[mini], :host(.mini) {
 .scroll-view {
    padding-left: 1px;
  }
}
